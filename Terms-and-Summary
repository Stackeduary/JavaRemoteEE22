implement:
- to write it in code
    - (Part wants to add that implementing means writing code according to a specification)
- in common language: put into practice, or use
  - The revered King implemented a new tax cut for all his people

class:
- made up of fields and methods (including constructor)
- blueprint for creating objects

package:
- set of classes

library:
- set of packages

instance:
- object

object = instance (noun)

instantiate (verb):
- creating an object
- creating an instance

initialize:
- give something an initial value
- give something its first value

declare:
- "hey, this thing exists"
- to make it "exist" in Java
- declaration (noun)

operator:
examples: +, -, *, %, /

operand:
- the thing that an operator is applied to
e.g., statement: int price + String restaurant;
operands: price, restaurant
operator: + (concatenation)

double age = 40.0;
int salary = 40000000;
age + (addition) salary;


parameters vs. arguments:
- parameters (price, restaurant) are the placeholders when defining the method
  - variables
  - placeholders
  - containers/boxes in memory
- arguments are the actual values ("BurgerEmperor", 12) when the method is called
  - argument <==> actual

invoke a method:
- call a method
- e.g., billObj.doubleSalary(startingSalary);
  - objectName.methodName(arguments);

capitalization conventions in Java:
- object names start with a lowercase letter, e.g., myDogObject
- class names start with an uppercase letter, e.g., Dog, Math, String
- all caps represent constants that don't/won't change in other parts of the program

superclass:
- another word for parent class

subclass:
- another word for child class


Git:

The 80/20 major commands:
- git status
- git add .
  - adds all files and folders in the current directory
- git commit -m "a descriptive commit message goes here"
- git push

background about Git:
https://latesthackingnews.com/wp-content/uploads/2018/06/Distributed-Version-Control-System-Workflow-What-Is-Git-Edureka.png

local = your computer

remote = GitHub.com (could also be Gitlab, Bitbucket)
- remote = far away

working copy:
- any directory on your local computer that has not been turned into a git repository
- we can turn a local directory into a git repository using the `git init` command

local repository:
- is a directory that has been initialized via `git init` as a local repository

remote repository:
- exists on github.com
- github.com/repositories > New
  - to create a new repository

we connect the local repository to the remote repository (AKA the github.com server) via the following command:
`git remote add origin git@github.com:Stackeduary/this-is-just-an-example.git`

`git clone <repository URL (SSH preferred)>`
example:
`git clone git@github.com:RandoAigro/MilitaryTime.git`
- this creates a copy (clone) of Rando's repository called "MilitaryTime" in your local environment


Common pitfalls:
- you are very likely going to see the following error when trying to push to a repo with multiple collaborators:
 ! [rejected]        main -> main (fetch first)
error: failed to push some refs to 'github.com:SyncMaster7/git-exercise.git'
- this is caused by your local repository not having the latest changes (i.e., code) from the remote repository (i.e., the server)
- YOU CAN PREVENT THIS by always running `git pull` in a shared repository BEFORE you try to push your new changes
- it's basically a refresh of the remote repository (server)


Principles:
- DRY
  - don't repeat yourself
  - if you find yourself copying and pasting a lot to comply with the DRY principle, then rethink your architecture

- YAGNI
  - you ain't gonna need it


IntelliJ:
- right click in the editor > Generate > choose the boilerplate (very standard and doesn't change a lot) code that you want IntelliJ to create for you
- examples:
  - getters
  - setters
  - constructors
  - toString() methods
- if you see an error in IntelliJ, have your cursor in/around the error and Alt + Enter to get help/correction


Inheritance:
- to avoid repeating one's self
- subclass = child class
- superclass = parent class
- method overriding:
  - code in subclass is written differently from how it is written in superclass
  - the subclass method replaces the method from the superclass
- Java only supports single inheritance
  - a subclass can only inherit from *one* superclass